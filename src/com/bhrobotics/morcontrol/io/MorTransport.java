/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bhrobotics.morcontrol.io;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MorTransport {

  public interface Iface {

    public RobotMode getMode() throws TException;

    public void updateMotor(Address address, double state) throws InvalidStateException, TException;

    public void updateRelay(Address address, RelayState state) throws TException;

    public void updateSolenoid(Address address, boolean state) throws TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public RobotMode getMode() throws TException
    {
      send_getMode();
      return recv_getMode();
    }

    public void send_getMode() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMode", TMessageType.CALL, ++seqid_));
      getMode_args args = new getMode_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RobotMode recv_getMode() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMode failed: out of sequence response");
      }
      getMode_result result = new getMode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMode failed: unknown result");
    }

    public void updateMotor(Address address, double state) throws InvalidStateException, TException
    {
      send_updateMotor(address, state);
      recv_updateMotor();
    }

    public void send_updateMotor(Address address, double state) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateMotor", TMessageType.CALL, ++seqid_));
      updateMotor_args args = new updateMotor_args();
      args.setAddress(address);
      args.setState(state);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateMotor() throws InvalidStateException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateMotor failed: out of sequence response");
      }
      updateMotor_result result = new updateMotor_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public void updateRelay(Address address, RelayState state) throws TException
    {
      send_updateRelay(address, state);
      recv_updateRelay();
    }

    public void send_updateRelay(Address address, RelayState state) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateRelay", TMessageType.CALL, ++seqid_));
      updateRelay_args args = new updateRelay_args();
      args.setAddress(address);
      args.setState(state);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateRelay() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateRelay failed: out of sequence response");
      }
      updateRelay_result result = new updateRelay_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public void updateSolenoid(Address address, boolean state) throws TException
    {
      send_updateSolenoid(address, state);
      recv_updateSolenoid();
    }

    public void send_updateSolenoid(Address address, boolean state) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateSolenoid", TMessageType.CALL, ++seqid_));
      updateSolenoid_args args = new updateSolenoid_args();
      args.setAddress(address);
      args.setState(state);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateSolenoid() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateSolenoid failed: out of sequence response");
      }
      updateSolenoid_result result = new updateSolenoid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getMode", new getMode());
      processMap_.put("updateMotor", new updateMotor());
      processMap_.put("updateRelay", new updateRelay());
      processMap_.put("updateSolenoid", new updateSolenoid());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getMode implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMode_args args = new getMode_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMode_result result = new getMode_result();
        result.success = iface_.getMode();
        oprot.writeMessageBegin(new TMessage("getMode", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateMotor implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateMotor_args args = new updateMotor_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateMotor", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateMotor_result result = new updateMotor_result();
        try {
          iface_.updateMotor(args.address, args.state);
        } catch (InvalidStateException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateMotor");
          oprot.writeMessageBegin(new TMessage("updateMotor", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateMotor", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateRelay implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateRelay_args args = new updateRelay_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateRelay", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateRelay_result result = new updateRelay_result();
        iface_.updateRelay(args.address, args.state);
        oprot.writeMessageBegin(new TMessage("updateRelay", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateSolenoid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateSolenoid_args args = new updateSolenoid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateSolenoid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateSolenoid_result result = new updateSolenoid_result();
        iface_.updateSolenoid(args.address, args.state);
        oprot.writeMessageBegin(new TMessage("updateSolenoid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getMode_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMode_args");


    public getMode_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMode_args(getMode_args other) {
    }

    public getMode_args deepCopy() {
      return new getMode_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMode_args)
        return this.equals((getMode_args)that);
      return false;
    }

    public boolean equals(getMode_args that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMode_args other = (getMode_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMode_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMode_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMode_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    private RobotMode success;

    // isset id assignments

    public getMode_result() {
    }

    public getMode_result(
      RobotMode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMode_result(getMode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMode_result deepCopy() {
      return new getMode_result(this);
    }

    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see RobotMode
     */
    public RobotMode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see RobotMode
     */
    public void setSuccess(RobotMode success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMode_result)
        return this.equals((getMode_result)that);
      return false;
    }

    public boolean equals(getMode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMode_result other = (getMode_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = RobotMode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateMotor_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateMotor_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);
    private static final TField STATE_FIELD_DESC = new TField("state", TType.DOUBLE, (short)2);

    private Address address;
    private double state;

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateMotor_args() {
    }

    public updateMotor_args(
      Address address,
      double state)
    {
      this();
      this.address = address;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMotor_args(updateMotor_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
      this.state = other.state;
    }

    public updateMotor_args deepCopy() {
      return new updateMotor_args(this);
    }

    public void clear() {
      this.address = null;
      setStateIsSet(false);
      this.state = 0.0;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public double getState() {
      return this.state;
    }

    public void setState(double state) {
      this.state = state;
      setStateIsSet(true);
    }

    public void unsetState() {
      __isset_vector[__STATE_ISSET_ID] = false;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return __isset_vector[__STATE_ISSET_ID];
    }

    public void setStateIsSet(boolean value) {
      __isset_vector[__STATE_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMotor_args)
        return this.equals((updateMotor_args)that);
      return false;
    }

    public boolean equals(updateMotor_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateMotor_args other = (updateMotor_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STATE
            if (field.type == TType.DOUBLE) {
              this.state = iprot.readDouble();
              setStateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeDouble(this.state);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateMotor_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateMotor_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateMotor_result");

    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private InvalidStateException error;

    // isset id assignments

    public updateMotor_result() {
    }

    public updateMotor_result(
      InvalidStateException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMotor_result(updateMotor_result other) {
      if (other.isSetError()) {
        this.error = new InvalidStateException(other.error);
      }
    }

    public updateMotor_result deepCopy() {
      return new updateMotor_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public InvalidStateException getError() {
      return this.error;
    }

    public void setError(InvalidStateException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMotor_result)
        return this.equals((updateMotor_result)that);
      return false;
    }

    public boolean equals(updateMotor_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateMotor_result other = (updateMotor_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidStateException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateMotor_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateRelay_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateRelay_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);
    private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short)2);

    private Address address;
    private RelayState state;

    // isset id assignments

    public updateRelay_args() {
    }

    public updateRelay_args(
      Address address,
      RelayState state)
    {
      this();
      this.address = address;
      this.state = state;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRelay_args(updateRelay_args other) {
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
      if (other.isSetState()) {
        this.state = other.state;
      }
    }

    public updateRelay_args deepCopy() {
      return new updateRelay_args(this);
    }

    public void clear() {
      this.address = null;
      this.state = null;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    /**
     * 
     * @see RelayState
     */
    public RelayState getState() {
      return this.state;
    }

    /**
     * 
     * @see RelayState
     */
    public void setState(RelayState state) {
      this.state = state;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRelay_args)
        return this.equals((updateRelay_args)that);
      return false;
    }

    public boolean equals(updateRelay_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateRelay_args other = (updateRelay_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STATE
            if (field.type == TType.I32) {
              this.state = RelayState.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(this.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateRelay_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateRelay_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateRelay_result");


    public updateRelay_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRelay_result(updateRelay_result other) {
    }

    public updateRelay_result deepCopy() {
      return new updateRelay_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRelay_result)
        return this.equals((updateRelay_result)that);
      return false;
    }

    public boolean equals(updateRelay_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateRelay_result other = (updateRelay_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateRelay_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSolenoid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSolenoid_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);
    private static final TField STATE_FIELD_DESC = new TField("state", TType.BOOL, (short)2);

    private Address address;
    private boolean state;

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateSolenoid_args() {
    }

    public updateSolenoid_args(
      Address address,
      boolean state)
    {
      this();
      this.address = address;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSolenoid_args(updateSolenoid_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
      this.state = other.state;
    }

    public updateSolenoid_args deepCopy() {
      return new updateSolenoid_args(this);
    }

    public void clear() {
      this.address = null;
      setStateIsSet(false);
      this.state = false;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public boolean isState() {
      return this.state;
    }

    public void setState(boolean state) {
      this.state = state;
      setStateIsSet(true);
    }

    public void unsetState() {
      __isset_vector[__STATE_ISSET_ID] = false;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return __isset_vector[__STATE_ISSET_ID];
    }

    public void setStateIsSet(boolean value) {
      __isset_vector[__STATE_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSolenoid_args)
        return this.equals((updateSolenoid_args)that);
      return false;
    }

    public boolean equals(updateSolenoid_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSolenoid_args other = (updateSolenoid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STATE
            if (field.type == TType.BOOL) {
              this.state = iprot.readBool();
              setStateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeBool(this.state);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSolenoid_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSolenoid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSolenoid_result");


    public updateSolenoid_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSolenoid_result(updateSolenoid_result other) {
    }

    public updateSolenoid_result deepCopy() {
      return new updateSolenoid_result(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSolenoid_result)
        return this.equals((updateSolenoid_result)that);
      return false;
    }

    public boolean equals(updateSolenoid_result that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSolenoid_result other = (updateSolenoid_result)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSolenoid_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
