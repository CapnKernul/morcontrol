/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bhrobotics.morcontrol.io;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class DeviceTransport {

  public interface Iface {

    public RobotMode getMode() throws TException;

    public void initializeEncoder(Address address, Address addressOne, Address addressTwo) throws InvalidAddressException, TException;

    public void updatePWM(Address address, int state) throws InvalidAddressException, InvalidStateException, TException;

    public void updateRelay(Address address, RelayState state) throws InvalidAddressException, TException;

    public void updateSolenoid(Address address, boolean state) throws InvalidAddressException, TException;

    public int getPWM(Address address) throws InvalidAddressException, TException;

    public RelayState getRelay(Address address) throws InvalidAddressException, TException;

    public boolean getSolenid(Address address) throws InvalidAddressException, TException;

    public boolean getDigitalInput(Address address) throws InvalidAddressException, TException;

    public double getAnalogInput(Address address) throws InvalidAddressException, TException;

    public double getEncoder(Address addressOne, EncoderCommand command) throws InvalidAddressException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public RobotMode getMode() throws TException
    {
      send_getMode();
      return recv_getMode();
    }

    public void send_getMode() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMode", TMessageType.CALL, ++seqid_));
      getMode_args args = new getMode_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RobotMode recv_getMode() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMode failed: out of sequence response");
      }
      getMode_result result = new getMode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMode failed: unknown result");
    }

    public void initializeEncoder(Address address, Address addressOne, Address addressTwo) throws InvalidAddressException, TException
    {
      send_initializeEncoder(address, addressOne, addressTwo);
      recv_initializeEncoder();
    }

    public void send_initializeEncoder(Address address, Address addressOne, Address addressTwo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("initializeEncoder", TMessageType.CALL, ++seqid_));
      initializeEncoder_args args = new initializeEncoder_args();
      args.setAddress(address);
      args.setAddressOne(addressOne);
      args.setAddressTwo(addressTwo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_initializeEncoder() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "initializeEncoder failed: out of sequence response");
      }
      initializeEncoder_result result = new initializeEncoder_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public void updatePWM(Address address, int state) throws InvalidAddressException, InvalidStateException, TException
    {
      send_updatePWM(address, state);
      recv_updatePWM();
    }

    public void send_updatePWM(Address address, int state) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updatePWM", TMessageType.CALL, ++seqid_));
      updatePWM_args args = new updatePWM_args();
      args.setAddress(address);
      args.setState(state);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updatePWM() throws InvalidAddressException, InvalidStateException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updatePWM failed: out of sequence response");
      }
      updatePWM_result result = new updatePWM_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.errorLocation != null) {
        throw result.errorLocation;
      }
      if (result.errorState != null) {
        throw result.errorState;
      }
      return;
    }

    public void updateRelay(Address address, RelayState state) throws InvalidAddressException, TException
    {
      send_updateRelay(address, state);
      recv_updateRelay();
    }

    public void send_updateRelay(Address address, RelayState state) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateRelay", TMessageType.CALL, ++seqid_));
      updateRelay_args args = new updateRelay_args();
      args.setAddress(address);
      args.setState(state);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateRelay() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateRelay failed: out of sequence response");
      }
      updateRelay_result result = new updateRelay_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public void updateSolenoid(Address address, boolean state) throws InvalidAddressException, TException
    {
      send_updateSolenoid(address, state);
      recv_updateSolenoid();
    }

    public void send_updateSolenoid(Address address, boolean state) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateSolenoid", TMessageType.CALL, ++seqid_));
      updateSolenoid_args args = new updateSolenoid_args();
      args.setAddress(address);
      args.setState(state);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateSolenoid() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateSolenoid failed: out of sequence response");
      }
      updateSolenoid_result result = new updateSolenoid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.error != null) {
        throw result.error;
      }
      return;
    }

    public int getPWM(Address address) throws InvalidAddressException, TException
    {
      send_getPWM(address);
      return recv_getPWM();
    }

    public void send_getPWM(Address address) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPWM", TMessageType.CALL, ++seqid_));
      getPWM_args args = new getPWM_args();
      args.setAddress(address);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_getPWM() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPWM failed: out of sequence response");
      }
      getPWM_result result = new getPWM_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPWM failed: unknown result");
    }

    public RelayState getRelay(Address address) throws InvalidAddressException, TException
    {
      send_getRelay(address);
      return recv_getRelay();
    }

    public void send_getRelay(Address address) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRelay", TMessageType.CALL, ++seqid_));
      getRelay_args args = new getRelay_args();
      args.setAddress(address);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RelayState recv_getRelay() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRelay failed: out of sequence response");
      }
      getRelay_result result = new getRelay_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRelay failed: unknown result");
    }

    public boolean getSolenid(Address address) throws InvalidAddressException, TException
    {
      send_getSolenid(address);
      return recv_getSolenid();
    }

    public void send_getSolenid(Address address) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSolenid", TMessageType.CALL, ++seqid_));
      getSolenid_args args = new getSolenid_args();
      args.setAddress(address);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_getSolenid() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSolenid failed: out of sequence response");
      }
      getSolenid_result result = new getSolenid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSolenid failed: unknown result");
    }

    public boolean getDigitalInput(Address address) throws InvalidAddressException, TException
    {
      send_getDigitalInput(address);
      return recv_getDigitalInput();
    }

    public void send_getDigitalInput(Address address) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDigitalInput", TMessageType.CALL, ++seqid_));
      getDigitalInput_args args = new getDigitalInput_args();
      args.setAddress(address);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_getDigitalInput() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDigitalInput failed: out of sequence response");
      }
      getDigitalInput_result result = new getDigitalInput_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDigitalInput failed: unknown result");
    }

    public double getAnalogInput(Address address) throws InvalidAddressException, TException
    {
      send_getAnalogInput(address);
      return recv_getAnalogInput();
    }

    public void send_getAnalogInput(Address address) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAnalogInput", TMessageType.CALL, ++seqid_));
      getAnalogInput_args args = new getAnalogInput_args();
      args.setAddress(address);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public double recv_getAnalogInput() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAnalogInput failed: out of sequence response");
      }
      getAnalogInput_result result = new getAnalogInput_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAnalogInput failed: unknown result");
    }

    public double getEncoder(Address addressOne, EncoderCommand command) throws InvalidAddressException, TException
    {
      send_getEncoder(addressOne, command);
      return recv_getEncoder();
    }

    public void send_getEncoder(Address addressOne, EncoderCommand command) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getEncoder", TMessageType.CALL, ++seqid_));
      getEncoder_args args = new getEncoder_args();
      args.setAddressOne(addressOne);
      args.setCommand(command);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public double recv_getEncoder() throws InvalidAddressException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getEncoder failed: out of sequence response");
      }
      getEncoder_result result = new getEncoder_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.error != null) {
        throw result.error;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getEncoder failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getMode", new getMode());
      processMap_.put("initializeEncoder", new initializeEncoder());
      processMap_.put("updatePWM", new updatePWM());
      processMap_.put("updateRelay", new updateRelay());
      processMap_.put("updateSolenoid", new updateSolenoid());
      processMap_.put("getPWM", new getPWM());
      processMap_.put("getRelay", new getRelay());
      processMap_.put("getSolenid", new getSolenid());
      processMap_.put("getDigitalInput", new getDigitalInput());
      processMap_.put("getAnalogInput", new getAnalogInput());
      processMap_.put("getEncoder", new getEncoder());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getMode implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMode_args args = new getMode_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMode_result result = new getMode_result();
        result.success = iface_.getMode();
        oprot.writeMessageBegin(new TMessage("getMode", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class initializeEncoder implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        initializeEncoder_args args = new initializeEncoder_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("initializeEncoder", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        initializeEncoder_result result = new initializeEncoder_result();
        try {
          iface_.initializeEncoder(args.address, args.addressOne, args.addressTwo);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing initializeEncoder");
          oprot.writeMessageBegin(new TMessage("initializeEncoder", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("initializeEncoder", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updatePWM implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updatePWM_args args = new updatePWM_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updatePWM", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updatePWM_result result = new updatePWM_result();
        try {
          iface_.updatePWM(args.address, args.state);
        } catch (InvalidAddressException errorLocation) {
          result.errorLocation = errorLocation;
        } catch (InvalidStateException errorState) {
          result.errorState = errorState;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updatePWM");
          oprot.writeMessageBegin(new TMessage("updatePWM", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updatePWM", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateRelay implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateRelay_args args = new updateRelay_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateRelay", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateRelay_result result = new updateRelay_result();
        try {
          iface_.updateRelay(args.address, args.state);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateRelay");
          oprot.writeMessageBegin(new TMessage("updateRelay", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateRelay", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateSolenoid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateSolenoid_args args = new updateSolenoid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateSolenoid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateSolenoid_result result = new updateSolenoid_result();
        try {
          iface_.updateSolenoid(args.address, args.state);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSolenoid");
          oprot.writeMessageBegin(new TMessage("updateSolenoid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateSolenoid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPWM implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPWM_args args = new getPWM_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPWM", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPWM_result result = new getPWM_result();
        try {
          result.success = iface_.getPWM(args.address);
          result.setSuccessIsSet(true);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPWM");
          oprot.writeMessageBegin(new TMessage("getPWM", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPWM", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRelay implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRelay_args args = new getRelay_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRelay", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRelay_result result = new getRelay_result();
        try {
          result.success = iface_.getRelay(args.address);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRelay");
          oprot.writeMessageBegin(new TMessage("getRelay", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRelay", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSolenid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSolenid_args args = new getSolenid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSolenid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSolenid_result result = new getSolenid_result();
        try {
          result.success = iface_.getSolenid(args.address);
          result.setSuccessIsSet(true);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSolenid");
          oprot.writeMessageBegin(new TMessage("getSolenid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSolenid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDigitalInput implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDigitalInput_args args = new getDigitalInput_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDigitalInput", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDigitalInput_result result = new getDigitalInput_result();
        try {
          result.success = iface_.getDigitalInput(args.address);
          result.setSuccessIsSet(true);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDigitalInput");
          oprot.writeMessageBegin(new TMessage("getDigitalInput", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getDigitalInput", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAnalogInput implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAnalogInput_args args = new getAnalogInput_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAnalogInput", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAnalogInput_result result = new getAnalogInput_result();
        try {
          result.success = iface_.getAnalogInput(args.address);
          result.setSuccessIsSet(true);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAnalogInput");
          oprot.writeMessageBegin(new TMessage("getAnalogInput", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAnalogInput", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getEncoder implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getEncoder_args args = new getEncoder_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getEncoder", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getEncoder_result result = new getEncoder_result();
        try {
          result.success = iface_.getEncoder(args.addressOne, args.command);
          result.setSuccessIsSet(true);
        } catch (InvalidAddressException error) {
          result.error = error;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getEncoder");
          oprot.writeMessageBegin(new TMessage("getEncoder", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getEncoder", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getMode_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMode_args");


    public getMode_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMode_args(getMode_args other) {
    }

    public getMode_args deepCopy() {
      return new getMode_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMode_args)
        return this.equals((getMode_args)that);
      return false;
    }

    public boolean equals(getMode_args that) {
      if (that == null)
        return false;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMode_args other = (getMode_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMode_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMode_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMode_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    private RobotMode success;

    // isset id assignments

    public getMode_result() {
    }

    public getMode_result(
      RobotMode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMode_result(getMode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getMode_result deepCopy() {
      return new getMode_result(this);
    }

    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see RobotMode
     */
    public RobotMode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see RobotMode
     */
    public void setSuccess(RobotMode success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMode_result)
        return this.equals((getMode_result)that);
      return false;
    }

    public boolean equals(getMode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMode_result other = (getMode_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = RobotMode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class initializeEncoder_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("initializeEncoder_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);
    private static final TField ADDRESS_ONE_FIELD_DESC = new TField("addressOne", TType.STRUCT, (short)2);
    private static final TField ADDRESS_TWO_FIELD_DESC = new TField("addressTwo", TType.STRUCT, (short)3);

    private Address address;
    private Address addressOne;
    private Address addressTwo;

    // isset id assignments

    public initializeEncoder_args() {
    }

    public initializeEncoder_args(
      Address address,
      Address addressOne,
      Address addressTwo)
    {
      this();
      this.address = address;
      this.addressOne = addressOne;
      this.addressTwo = addressTwo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initializeEncoder_args(initializeEncoder_args other) {
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
      if (other.isSetAddressOne()) {
        this.addressOne = new Address(other.addressOne);
      }
      if (other.isSetAddressTwo()) {
        this.addressTwo = new Address(other.addressTwo);
      }
    }

    public initializeEncoder_args deepCopy() {
      return new initializeEncoder_args(this);
    }

    public void clear() {
      this.address = null;
      this.addressOne = null;
      this.addressTwo = null;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public Address getAddressOne() {
      return this.addressOne;
    }

    public void setAddressOne(Address addressOne) {
      this.addressOne = addressOne;
    }

    public void unsetAddressOne() {
      this.addressOne = null;
    }

    /** Returns true if field addressOne is set (has been assigned a value) and false otherwise */
    public boolean isSetAddressOne() {
      return this.addressOne != null;
    }

    public void setAddressOneIsSet(boolean value) {
      if (!value) {
        this.addressOne = null;
      }
    }

    public Address getAddressTwo() {
      return this.addressTwo;
    }

    public void setAddressTwo(Address addressTwo) {
      this.addressTwo = addressTwo;
    }

    public void unsetAddressTwo() {
      this.addressTwo = null;
    }

    /** Returns true if field addressTwo is set (has been assigned a value) and false otherwise */
    public boolean isSetAddressTwo() {
      return this.addressTwo != null;
    }

    public void setAddressTwoIsSet(boolean value) {
      if (!value) {
        this.addressTwo = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initializeEncoder_args)
        return this.equals((initializeEncoder_args)that);
      return false;
    }

    public boolean equals(initializeEncoder_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_addressOne = true && this.isSetAddressOne();
      boolean that_present_addressOne = true && that.isSetAddressOne();
      if (this_present_addressOne || that_present_addressOne) {
        if (!(this_present_addressOne && that_present_addressOne))
          return false;
        if (!this.addressOne.equals(that.addressOne))
          return false;
      }

      boolean this_present_addressTwo = true && this.isSetAddressTwo();
      boolean that_present_addressTwo = true && that.isSetAddressTwo();
      if (this_present_addressTwo || that_present_addressTwo) {
        if (!(this_present_addressTwo && that_present_addressTwo))
          return false;
        if (!this.addressTwo.equals(that.addressTwo))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      initializeEncoder_args other = (initializeEncoder_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAddressOne(), other.isSetAddressOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddressOne()) {
        lastComparison = this.addressOne.compareTo(other.addressOne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAddressTwo(), other.isSetAddressTwo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddressTwo()) {
        lastComparison = this.addressTwo.compareTo(other.addressTwo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ADDRESS_ONE
            if (field.type == TType.STRUCT) {
              this.addressOne = new Address();
              this.addressOne.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ADDRESS_TWO
            if (field.type == TType.STRUCT) {
              this.addressTwo = new Address();
              this.addressTwo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.addressOne != null) {
        oprot.writeFieldBegin(ADDRESS_ONE_FIELD_DESC);
        this.addressOne.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.addressTwo != null) {
        oprot.writeFieldBegin(ADDRESS_TWO_FIELD_DESC);
        this.addressTwo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("initializeEncoder_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("addressOne:");
      if (this.addressOne == null) {
        sb.append("null");
      } else {
        sb.append(this.addressOne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("addressTwo:");
      if (this.addressTwo == null) {
        sb.append("null");
      } else {
        sb.append(this.addressTwo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class initializeEncoder_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("initializeEncoder_result");

    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private InvalidAddressException error;

    // isset id assignments

    public initializeEncoder_result() {
    }

    public initializeEncoder_result(
      InvalidAddressException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initializeEncoder_result(initializeEncoder_result other) {
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public initializeEncoder_result deepCopy() {
      return new initializeEncoder_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initializeEncoder_result)
        return this.equals((initializeEncoder_result)that);
      return false;
    }

    public boolean equals(initializeEncoder_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      initializeEncoder_result other = (initializeEncoder_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("initializeEncoder_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updatePWM_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updatePWM_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);
    private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short)2);

    private Address address;
    private int state;

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updatePWM_args() {
    }

    public updatePWM_args(
      Address address,
      int state)
    {
      this();
      this.address = address;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePWM_args(updatePWM_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
      this.state = other.state;
    }

    public updatePWM_args deepCopy() {
      return new updatePWM_args(this);
    }

    public void clear() {
      this.address = null;
      setStateIsSet(false);
      this.state = 0;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public void setState(int state) {
      this.state = state;
      setStateIsSet(true);
    }

    public void unsetState() {
      __isset_vector[__STATE_ISSET_ID] = false;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return __isset_vector[__STATE_ISSET_ID];
    }

    public void setStateIsSet(boolean value) {
      __isset_vector[__STATE_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePWM_args)
        return this.equals((updatePWM_args)that);
      return false;
    }

    public boolean equals(updatePWM_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updatePWM_args other = (updatePWM_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STATE
            if (field.type == TType.I32) {
              this.state = iprot.readI32();
              setStateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updatePWM_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updatePWM_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updatePWM_result");

    private static final TField ERROR_LOCATION_FIELD_DESC = new TField("errorLocation", TType.STRUCT, (short)1);
    private static final TField ERROR_STATE_FIELD_DESC = new TField("errorState", TType.STRUCT, (short)2);

    private InvalidAddressException errorLocation;
    private InvalidStateException errorState;

    // isset id assignments

    public updatePWM_result() {
    }

    public updatePWM_result(
      InvalidAddressException errorLocation,
      InvalidStateException errorState)
    {
      this();
      this.errorLocation = errorLocation;
      this.errorState = errorState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePWM_result(updatePWM_result other) {
      if (other.isSetErrorLocation()) {
        this.errorLocation = new InvalidAddressException(other.errorLocation);
      }
      if (other.isSetErrorState()) {
        this.errorState = new InvalidStateException(other.errorState);
      }
    }

    public updatePWM_result deepCopy() {
      return new updatePWM_result(this);
    }

    public void clear() {
      this.errorLocation = null;
      this.errorState = null;
    }

    public InvalidAddressException getErrorLocation() {
      return this.errorLocation;
    }

    public void setErrorLocation(InvalidAddressException errorLocation) {
      this.errorLocation = errorLocation;
    }

    public void unsetErrorLocation() {
      this.errorLocation = null;
    }

    /** Returns true if field errorLocation is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorLocation() {
      return this.errorLocation != null;
    }

    public void setErrorLocationIsSet(boolean value) {
      if (!value) {
        this.errorLocation = null;
      }
    }

    public InvalidStateException getErrorState() {
      return this.errorState;
    }

    public void setErrorState(InvalidStateException errorState) {
      this.errorState = errorState;
    }

    public void unsetErrorState() {
      this.errorState = null;
    }

    /** Returns true if field errorState is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorState() {
      return this.errorState != null;
    }

    public void setErrorStateIsSet(boolean value) {
      if (!value) {
        this.errorState = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePWM_result)
        return this.equals((updatePWM_result)that);
      return false;
    }

    public boolean equals(updatePWM_result that) {
      if (that == null)
        return false;

      boolean this_present_errorLocation = true && this.isSetErrorLocation();
      boolean that_present_errorLocation = true && that.isSetErrorLocation();
      if (this_present_errorLocation || that_present_errorLocation) {
        if (!(this_present_errorLocation && that_present_errorLocation))
          return false;
        if (!this.errorLocation.equals(that.errorLocation))
          return false;
      }

      boolean this_present_errorState = true && this.isSetErrorState();
      boolean that_present_errorState = true && that.isSetErrorState();
      if (this_present_errorState || that_present_errorState) {
        if (!(this_present_errorState && that_present_errorState))
          return false;
        if (!this.errorState.equals(that.errorState))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updatePWM_result other = (updatePWM_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetErrorLocation(), other.isSetErrorLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorLocation()) {
        lastComparison = this.errorLocation.compareTo(other.errorLocation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetErrorState(), other.isSetErrorState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorState()) {
        lastComparison = this.errorState.compareTo(other.errorState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR_LOCATION
            if (field.type == TType.STRUCT) {
              this.errorLocation = new InvalidAddressException();
              this.errorLocation.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ERROR_STATE
            if (field.type == TType.STRUCT) {
              this.errorState = new InvalidStateException();
              this.errorState.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetErrorLocation()) {
        oprot.writeFieldBegin(ERROR_LOCATION_FIELD_DESC);
        this.errorLocation.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetErrorState()) {
        oprot.writeFieldBegin(ERROR_STATE_FIELD_DESC);
        this.errorState.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updatePWM_result(");
      boolean first = true;

      sb.append("errorLocation:");
      if (this.errorLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.errorLocation);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorState:");
      if (this.errorState == null) {
        sb.append("null");
      } else {
        sb.append(this.errorState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateRelay_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateRelay_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);
    private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short)2);

    private Address address;
    private RelayState state;

    // isset id assignments

    public updateRelay_args() {
    }

    public updateRelay_args(
      Address address,
      RelayState state)
    {
      this();
      this.address = address;
      this.state = state;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRelay_args(updateRelay_args other) {
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
      if (other.isSetState()) {
        this.state = other.state;
      }
    }

    public updateRelay_args deepCopy() {
      return new updateRelay_args(this);
    }

    public void clear() {
      this.address = null;
      this.state = null;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    /**
     * 
     * @see RelayState
     */
    public RelayState getState() {
      return this.state;
    }

    /**
     * 
     * @see RelayState
     */
    public void setState(RelayState state) {
      this.state = state;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRelay_args)
        return this.equals((updateRelay_args)that);
      return false;
    }

    public boolean equals(updateRelay_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateRelay_args other = (updateRelay_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STATE
            if (field.type == TType.I32) {
              this.state = RelayState.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(this.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateRelay_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateRelay_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateRelay_result");

    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private InvalidAddressException error;

    // isset id assignments

    public updateRelay_result() {
    }

    public updateRelay_result(
      InvalidAddressException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRelay_result(updateRelay_result other) {
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public updateRelay_result deepCopy() {
      return new updateRelay_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRelay_result)
        return this.equals((updateRelay_result)that);
      return false;
    }

    public boolean equals(updateRelay_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateRelay_result other = (updateRelay_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateRelay_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSolenoid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSolenoid_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);
    private static final TField STATE_FIELD_DESC = new TField("state", TType.BOOL, (short)2);

    private Address address;
    private boolean state;

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateSolenoid_args() {
    }

    public updateSolenoid_args(
      Address address,
      boolean state)
    {
      this();
      this.address = address;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSolenoid_args(updateSolenoid_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
      this.state = other.state;
    }

    public updateSolenoid_args deepCopy() {
      return new updateSolenoid_args(this);
    }

    public void clear() {
      this.address = null;
      setStateIsSet(false);
      this.state = false;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public boolean isState() {
      return this.state;
    }

    public void setState(boolean state) {
      this.state = state;
      setStateIsSet(true);
    }

    public void unsetState() {
      __isset_vector[__STATE_ISSET_ID] = false;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return __isset_vector[__STATE_ISSET_ID];
    }

    public void setStateIsSet(boolean value) {
      __isset_vector[__STATE_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSolenoid_args)
        return this.equals((updateSolenoid_args)that);
      return false;
    }

    public boolean equals(updateSolenoid_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSolenoid_args other = (updateSolenoid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STATE
            if (field.type == TType.BOOL) {
              this.state = iprot.readBool();
              setStateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeBool(this.state);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSolenoid_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSolenoid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSolenoid_result");

    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private InvalidAddressException error;

    // isset id assignments

    public updateSolenoid_result() {
    }

    public updateSolenoid_result(
      InvalidAddressException error)
    {
      this();
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSolenoid_result(updateSolenoid_result other) {
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public updateSolenoid_result deepCopy() {
      return new updateSolenoid_result(this);
    }

    public void clear() {
      this.error = null;
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSolenoid_result)
        return this.equals((updateSolenoid_result)that);
      return false;
    }

    public boolean equals(updateSolenoid_result that) {
      if (that == null)
        return false;

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSolenoid_result other = (updateSolenoid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSolenoid_result(");
      boolean first = true;

      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPWM_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPWM_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);

    private Address address;

    // isset id assignments

    public getPWM_args() {
    }

    public getPWM_args(
      Address address)
    {
      this();
      this.address = address;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPWM_args(getPWM_args other) {
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
    }

    public getPWM_args deepCopy() {
      return new getPWM_args(this);
    }

    public void clear() {
      this.address = null;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPWM_args)
        return this.equals((getPWM_args)that);
      return false;
    }

    public boolean equals(getPWM_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPWM_args other = (getPWM_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPWM_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPWM_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPWM_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private int success;
    private InvalidAddressException error;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getPWM_result() {
    }

    public getPWM_result(
      int success,
      InvalidAddressException error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPWM_result(getPWM_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public getPWM_result deepCopy() {
      return new getPWM_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.error = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPWM_result)
        return this.equals((getPWM_result)that);
      return false;
    }

    public boolean equals(getPWM_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPWM_result other = (getPWM_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPWM_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRelay_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRelay_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);

    private Address address;

    // isset id assignments

    public getRelay_args() {
    }

    public getRelay_args(
      Address address)
    {
      this();
      this.address = address;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRelay_args(getRelay_args other) {
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
    }

    public getRelay_args deepCopy() {
      return new getRelay_args(this);
    }

    public void clear() {
      this.address = null;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRelay_args)
        return this.equals((getRelay_args)that);
      return false;
    }

    public boolean equals(getRelay_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRelay_args other = (getRelay_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRelay_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRelay_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRelay_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private RelayState success;
    private InvalidAddressException error;

    // isset id assignments

    public getRelay_result() {
    }

    public getRelay_result(
      RelayState success,
      InvalidAddressException error)
    {
      this();
      this.success = success;
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRelay_result(getRelay_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public getRelay_result deepCopy() {
      return new getRelay_result(this);
    }

    public void clear() {
      this.success = null;
      this.error = null;
    }

    /**
     * 
     * @see RelayState
     */
    public RelayState getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see RelayState
     */
    public void setSuccess(RelayState success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRelay_result)
        return this.equals((getRelay_result)that);
      return false;
    }

    public boolean equals(getRelay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRelay_result other = (getRelay_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = RelayState.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success.getValue());
        oprot.writeFieldEnd();
      } else if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRelay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSolenid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSolenid_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);

    private Address address;

    // isset id assignments

    public getSolenid_args() {
    }

    public getSolenid_args(
      Address address)
    {
      this();
      this.address = address;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSolenid_args(getSolenid_args other) {
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
    }

    public getSolenid_args deepCopy() {
      return new getSolenid_args(this);
    }

    public void clear() {
      this.address = null;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSolenid_args)
        return this.equals((getSolenid_args)that);
      return false;
    }

    public boolean equals(getSolenid_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSolenid_args other = (getSolenid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSolenid_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSolenid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSolenid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private boolean success;
    private InvalidAddressException error;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getSolenid_result() {
    }

    public getSolenid_result(
      boolean success,
      InvalidAddressException error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSolenid_result(getSolenid_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public getSolenid_result deepCopy() {
      return new getSolenid_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.error = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSolenid_result)
        return this.equals((getSolenid_result)that);
      return false;
    }

    public boolean equals(getSolenid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSolenid_result other = (getSolenid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSolenid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDigitalInput_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDigitalInput_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);

    private Address address;

    // isset id assignments

    public getDigitalInput_args() {
    }

    public getDigitalInput_args(
      Address address)
    {
      this();
      this.address = address;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDigitalInput_args(getDigitalInput_args other) {
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
    }

    public getDigitalInput_args deepCopy() {
      return new getDigitalInput_args(this);
    }

    public void clear() {
      this.address = null;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDigitalInput_args)
        return this.equals((getDigitalInput_args)that);
      return false;
    }

    public boolean equals(getDigitalInput_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDigitalInput_args other = (getDigitalInput_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDigitalInput_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDigitalInput_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDigitalInput_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private boolean success;
    private InvalidAddressException error;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getDigitalInput_result() {
    }

    public getDigitalInput_result(
      boolean success,
      InvalidAddressException error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDigitalInput_result(getDigitalInput_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public getDigitalInput_result deepCopy() {
      return new getDigitalInput_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.error = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDigitalInput_result)
        return this.equals((getDigitalInput_result)that);
      return false;
    }

    public boolean equals(getDigitalInput_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDigitalInput_result other = (getDigitalInput_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDigitalInput_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAnalogInput_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAnalogInput_args");

    private static final TField ADDRESS_FIELD_DESC = new TField("address", TType.STRUCT, (short)1);

    private Address address;

    // isset id assignments

    public getAnalogInput_args() {
    }

    public getAnalogInput_args(
      Address address)
    {
      this();
      this.address = address;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnalogInput_args(getAnalogInput_args other) {
      if (other.isSetAddress()) {
        this.address = new Address(other.address);
      }
    }

    public getAnalogInput_args deepCopy() {
      return new getAnalogInput_args(this);
    }

    public void clear() {
      this.address = null;
    }

    public Address getAddress() {
      return this.address;
    }

    public void setAddress(Address address) {
      this.address = address;
    }

    public void unsetAddress() {
      this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress() {
      return this.address != null;
    }

    public void setAddressIsSet(boolean value) {
      if (!value) {
        this.address = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAnalogInput_args)
        return this.equals((getAnalogInput_args)that);
      return false;
    }

    public boolean equals(getAnalogInput_args that) {
      if (that == null)
        return false;

      boolean this_present_address = true && this.isSetAddress();
      boolean that_present_address = true && that.isSetAddress();
      if (this_present_address || that_present_address) {
        if (!(this_present_address && that_present_address))
          return false;
        if (!this.address.equals(that.address))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAnalogInput_args other = (getAnalogInput_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddress(), other.isSetAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddress()) {
        lastComparison = this.address.compareTo(other.address);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS
            if (field.type == TType.STRUCT) {
              this.address = new Address();
              this.address.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        this.address.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAnalogInput_args(");
      boolean first = true;

      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAnalogInput_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAnalogInput_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.DOUBLE, (short)0);
    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private double success;
    private InvalidAddressException error;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getAnalogInput_result() {
    }

    public getAnalogInput_result(
      double success,
      InvalidAddressException error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnalogInput_result(getAnalogInput_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public getAnalogInput_result deepCopy() {
      return new getAnalogInput_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.error = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public void setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAnalogInput_result)
        return this.equals((getAnalogInput_result)that);
      return false;
    }

    public boolean equals(getAnalogInput_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAnalogInput_result other = (getAnalogInput_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.DOUBLE) {
              this.success = iprot.readDouble();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeDouble(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAnalogInput_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getEncoder_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getEncoder_args");

    private static final TField ADDRESS_ONE_FIELD_DESC = new TField("addressOne", TType.STRUCT, (short)1);
    private static final TField COMMAND_FIELD_DESC = new TField("command", TType.I32, (short)2);

    private Address addressOne;
    private EncoderCommand command;

    // isset id assignments

    public getEncoder_args() {
    }

    public getEncoder_args(
      Address addressOne,
      EncoderCommand command)
    {
      this();
      this.addressOne = addressOne;
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEncoder_args(getEncoder_args other) {
      if (other.isSetAddressOne()) {
        this.addressOne = new Address(other.addressOne);
      }
      if (other.isSetCommand()) {
        this.command = other.command;
      }
    }

    public getEncoder_args deepCopy() {
      return new getEncoder_args(this);
    }

    public void clear() {
      this.addressOne = null;
      this.command = null;
    }

    public Address getAddressOne() {
      return this.addressOne;
    }

    public void setAddressOne(Address addressOne) {
      this.addressOne = addressOne;
    }

    public void unsetAddressOne() {
      this.addressOne = null;
    }

    /** Returns true if field addressOne is set (has been assigned a value) and false otherwise */
    public boolean isSetAddressOne() {
      return this.addressOne != null;
    }

    public void setAddressOneIsSet(boolean value) {
      if (!value) {
        this.addressOne = null;
      }
    }

    /**
     * 
     * @see EncoderCommand
     */
    public EncoderCommand getCommand() {
      return this.command;
    }

    /**
     * 
     * @see EncoderCommand
     */
    public void setCommand(EncoderCommand command) {
      this.command = command;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEncoder_args)
        return this.equals((getEncoder_args)that);
      return false;
    }

    public boolean equals(getEncoder_args that) {
      if (that == null)
        return false;

      boolean this_present_addressOne = true && this.isSetAddressOne();
      boolean that_present_addressOne = true && that.isSetAddressOne();
      if (this_present_addressOne || that_present_addressOne) {
        if (!(this_present_addressOne && that_present_addressOne))
          return false;
        if (!this.addressOne.equals(that.addressOne))
          return false;
      }

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getEncoder_args other = (getEncoder_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAddressOne(), other.isSetAddressOne());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddressOne()) {
        lastComparison = this.addressOne.compareTo(other.addressOne);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCommand(), other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ADDRESS_ONE
            if (field.type == TType.STRUCT) {
              this.addressOne = new Address();
              this.addressOne.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COMMAND
            if (field.type == TType.I32) {
              this.command = EncoderCommand.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.addressOne != null) {
        oprot.writeFieldBegin(ADDRESS_ONE_FIELD_DESC);
        this.addressOne.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.command != null) {
        oprot.writeFieldBegin(COMMAND_FIELD_DESC);
        oprot.writeI32(this.command.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getEncoder_args(");
      boolean first = true;

      sb.append("addressOne:");
      if (this.addressOne == null) {
        sb.append("null");
      } else {
        sb.append(this.addressOne);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getEncoder_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getEncoder_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.DOUBLE, (short)0);
    private static final TField ERROR_FIELD_DESC = new TField("error", TType.STRUCT, (short)1);

    private double success;
    private InvalidAddressException error;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getEncoder_result() {
    }

    public getEncoder_result(
      double success,
      InvalidAddressException error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.error = error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEncoder_result(getEncoder_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetError()) {
        this.error = new InvalidAddressException(other.error);
      }
    }

    public getEncoder_result deepCopy() {
      return new getEncoder_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.error = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public void setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public InvalidAddressException getError() {
      return this.error;
    }

    public void setError(InvalidAddressException error) {
      this.error = error;
    }

    public void unsetError() {
      this.error = null;
    }

    /** Returns true if field error is set (has been assigned a value) and false otherwise */
    public boolean isSetError() {
      return this.error != null;
    }

    public void setErrorIsSet(boolean value) {
      if (!value) {
        this.error = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEncoder_result)
        return this.equals((getEncoder_result)that);
      return false;
    }

    public boolean equals(getEncoder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_error = true && this.isSetError();
      boolean that_present_error = true && that.isSetError();
      if (this_present_error || that_present_error) {
        if (!(this_present_error && that_present_error))
          return false;
        if (!this.error.equals(that.error))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getEncoder_result other = (getEncoder_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetError(), other.isSetError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError()) {
        lastComparison = this.error.compareTo(other.error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.DOUBLE) {
              this.success = iprot.readDouble();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // ERROR
            if (field.type == TType.STRUCT) {
              this.error = new InvalidAddressException();
              this.error.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeDouble(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        this.error.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getEncoder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
